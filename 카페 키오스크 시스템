
const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const port = 3004; // 포트를 3004로 설정

// 'images' 폴더를 정적 파일로 제공하는 미들웨어 설정
app.use('/images', express.static('images'));

// body-parser 미들웨어 설정
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// 메뉴 목록 (가상 데이터)
const menuItems = [
  { id: 1, name: '아메리카노', price: 3000, image: '아메리카노.jpg' },
  { id: 2, name: '카페라떼', price: 3500, image: '카페라떼.jpg' },
  { id: 3, name: '카푸치노', price: 4000, image: '카푸치노.jpg' },
  { id: 4, name: '바닐라 라떼', price: 4500, image: '바닐라라떼.jpg' },
  { id: 5, name: '에스프레소', price: 2800, image: '에스프레소.jpg' },
  { id: 6, name: '카라멜 마키아토', price: 4300, image: '카라멜 마끼야또.jpg' },
  { id: 7, name: '헤이즐넛 라떼', price: 5000, image: '헤이즐넛.jpg' }
  // ... 다른 메뉴 아이템들
];

// 주문을 저장할 배열
let orders = [];

// 메인 페이지 라우트
app.get('/', (req, res) => {
  let welcomeMessage = '카페 키오스크 시스템';
  let menuList = menuItems.map(item => 
    `<a href="/order/${item.id}" class="menu-item">
      <h2>${item.name} - ${item.price}원</h2>
      <img src="/images/${item.image}" alt="${item.name}" style="width:100px;height:100px;">
    </a>`
  ).join('');

  let styles = `
    <style>
      body { text-align: center; }
      .menu-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-gap: 10px;
      }
      .menu-item {
        text-align: center;
        display: block;
        margin: 10px;
        color: black;
        text-decoration: none;
      }
      img {
        max-width: 100%;
        height: auto;
      }
      .welcome-message {
        color: blue;
      }
    </style>
  `;

  res.send(`<h1 class="welcome-message">${welcomeMessage}</h1><div class="menu-container">${menuList}</div>${styles}`);
});

// 개별 주문 페이지 라우트
app.get('/order/:id', (req, res) => {
  const menuItemId = req.params.id;
  const menuItem = menuItems.find(item => item.id == menuItemId);
  let orderForm = `
    <h1>${menuItem.name} 주문하기</h1>
    <form action="/add-to-order" method="post">
      <input type="hidden" name="menuItem" value="${menuItemId}">
      <label for="quantity">수량:</label>
      <input type="number" id="quantity" name="quantity" min="1" value="1">
      <button type="submit" style="margin-top: 10px;">추가하기</button>
      <button type="button" onclick="addShot(${menuItemId})" style="margin-top: 10px; margin-left: 10px;">샷 추가하기</button>
      <button formaction="/payment" formmethod="get" style="margin-top: 10px; width: auto; padding: 0 20px;">주문하기</button>
    </form>
    <a href="/" style="display:block; margin-top: 10px;">메뉴로 돌아가기</a>
  `;

  let script = `
    <script>
      function addShot(menuItemId) {
        var quantityInput = document.getElementById('quantity');
        var quantity = parseInt(quantityInput.value);
        fetch('/add-shot', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ menuItemId: menuItemId, quantity: quantity })
        })
        .then(response => response.json())
        .then(data => {
          alert(data.message);
          quantityInput.value = 1; // 수량을 1로 리셋
        });
      }
    </script>
  `;

  res.send(orderForm + script);
});


// 주문 추가 처리 라우트
app.post('/add-to-order', (req, res) => {
  const menuItemId = req.body.menuItem;
  const quantity = parseInt(req.body.quantity, 10);
  const menuItem = menuItems.find(item => item.id == menuItemId);
  
  // 주문에 수량을 곱하여 저장
  const order = { ...menuItem, quantity };
  orders.push(order);
  
  res.redirect(`/order/${menuItemId}`); // 주문 추가 후 같은 페이지로 리다이렉트
});

// 샷 추가 처리 라우트
app.post('/add-shot', (req, res) => {
  const { menuItemId, quantity } = req.body;
  const menuItem = menuItems.find(item => item.id == menuItemId);
  if (menuItem) {
    const newPrice = menuItem.price + 600 * quantity;
    orders.push({ ...menuItem, price: newPrice, quantity });
    res.json({ message: `${menuItem.name}에 샷 추가. 새 가격: ${newPrice}원` });
  } else {
    res.status(404).json({ message: '메뉴 아이템을 찾을 수 없습니다.' });
  }
});

// 결제 페이지 라우트
app.get('/payment', (req, res) => {
  let totalAmount = orders.reduce((total, order) => total + (order.price * order.quantity), 0);
  let orderSummary = orders.map(order => 
    `<p>${order.name} - ${order.quantity}개 - ${order.price}원</p>`
  ).join('');
  let paymentForm = `
    <h1>결제 페이지</h1>
    ${orderSummary}
    <p>총 금액: ${totalAmount}원</p>
    <form action="/process-payment" method="post">
      <button type="submit">결제하기</button>
    </form>
  `;
  res.send(paymentForm);
});


// 결제 처리 라우트
app.post('/process-payment', (req, res) => {
  orders = [];
  res.send('<h1>결제가 완료되었습니다!</h1><a href="/">홈으로</a>');
});

// 서버 시작
app.listen(port, () => {
  console.log(`Express 서버가 포트 ${port}에서 실행 중입니다.`);
});



